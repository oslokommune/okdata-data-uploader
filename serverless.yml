frameworkVersion: ">=3.39.0 <4.0.0"

service: data-uploader

provider:
  name: aws
  ecr:
    images:
      okdata-data-uploader:
        path: ./
        platform: linux/amd64
  region: ${opt:region, 'eu-west-1'}
  endpointType: REGIONAL
  stage: ${opt:stage, 'dev'}
  tracing:
    apiGateway: true
    lambda: true
  deploymentBucket:
    name: ok-origo-dataplatform-config-${self:custom.resolvedStage}
    serverSideEncryption: AES256
  deploymentPrefix: deploy
  logRetentionInDays: 90
  iam:
    role:
      permissionsBoundary: "arn:aws:iam::${aws:accountId}:policy/oslokommune/oslokommune-boundary"
      managedPolicies:
        - "arn:aws:iam::${aws:accountId}:policy/data-uploader-policy"
  environment:
    GIT_REV: ${git:branch}:${git:sha1}
    BUCKET: ok-origo-dataplatform-${self:custom.resolvedStage}
    SERVICE_NAME: ${self:service}
    METADATA_API_URL: ${ssm:/dataplatform/shared/api-gateway-url}/metadata
    STATUS_API_URL: ${ssm:/dataplatform/shared/api-gateway-url}/status-api/status
    ENABLE_AUTH: true
    KEYCLOAK_SERVER: ${ssm:/dataplatform/shared/keycloak-server-url}
    KEYCLOAK_REALM: api-catalog
    RESOURCE_SERVER_CLIENT_ID: "okdata-resource-server"
    OKDATA_ENVIRONMENT: ${self:custom.resolvedStage}
    OKDATA_CLIENT_ID: ${self:service}
    EVENT_QUEUE_NAME: DatasetEvents.fifo
    EMAIL_API_URL: ${ssm:/dataplatform/shared/email-api-url}
  tags:
    GIT_REV: ${git:branch}:${git:sha1}

plugins:
  - serverless-better-credentials # must be first
  - "@kakkuk/serverless-aws-apigateway-documentation"
  - serverless-plugin-git-variables

resources:
  Description: |
    ${self:service} ${git:branch}:${git:sha1}
    ${git:message}

package:
  patterns:
    - '!**/*'
    - uploader/*.py
    - uploader/handlers/*.py
    - doc/models/*.json

functions:
  generate_signed_post:
    image:
      name: okdata-data-uploader
      command:
        - uploader.handlers.generate_signed_post.handler
    timeout: 30
    events:
      - http:
          path: /
          method: post
          cors: true
          authorizer:
            arn: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:keycloak-authorizer-${self:custom.resolvedStage}-authenticate
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
            identityValidationExpression: "^(b|B)earer [-0-9a-zA-Z\\._]*$"
            type: token
          documentation:
            summary: Generate a signed POST URL
            description: Generates a signed POST URL that a new distribution can be uploaded to
            requestModels:
              "application/json": UploadRequest
            methodResponses:
              - statusCode: "200"
                responseModels:
                  "application/json": UploadResponse
              - statusCode: "400"
                responseModels:
                  "application/json": ErrorResponse
              - statusCode: "403"
                responseModels:
                  "application/json": ErrorResponse
              - statusCode: "500"
                responseModels:
                  "application/json": ErrorResponse
  push-dataset-events:
    image:
      name: okdata-data-uploader
      command:
        - uploader.handlers.push_dataset_events.handler
    memorySize: 8192
    timeout: 30
    events:
      - http:
          path: /events
          method: post
          cors: true
          authorizer:
            arn: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:keycloak-authorizer-${self:custom.resolvedStage}-authenticate
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
            identityValidationExpression: "^(b|B)earer [-0-9a-zA-Z\\._]*$"
            type: token
          documentation:
            summary: Push events to an event dataset
            requestModels:
              "application/json": UploadRequest
            methodResponses:
              - statusCode: "201"
                responseModels:
                  "application/json": UploadResponse
              - statusCode: "400"
                responseModels:
                  "application/json": ErrorResponse
              - statusCode: "403"
                responseModels:
                  "application/json": ErrorResponse
              - statusCode: "404"
                responseModels:
                  "application/json": ErrorResponse
              - statusCode: "500"
                responseModels:
                  "application/json": ErrorResponse
  handle-queue:
    image:
      name: okdata-data-uploader
      command:
        - uploader.handlers.handle_queue.event_queue_handler
    memorySize: 8192
    timeout: 40
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:${aws:accountId}:DatasetEvents.fifo
          batchSize: 1
custom:
  prune:
    automatic: true
    number: 3
  documentation:
    info:
      title: Data Uploader
      version: 0.0.1
      summary: Data Uploader API
      description: Creates a signed URL and parameters that can be used to POST a file to the S3 upload bucket.
    models:
      - name: UploadRequest
        description: Request to upload a file to S3
        contentType: "application/json"
        schema: ${file(doc/models/uploadRequest.json)}
      - name: UploadResponse
        description: Response object with the presigned post url and parameters to POST to S3
        contentType: "application/json"
        schema: ${file(doc/models/uploadResponse.json)}
      - name: PushEventsRequest
        description: Request to push datasets events
        contentType: "application/json"
        schema: ${file(doc/models/pushEventsRequest.json)}
      - name: PushEventsResponse
        description: Response object with resulting edition ID
        contentType: "application/json"
        schema: ${file(doc/models/pushEventsResponse.json)}
      - name: ErrorResponse
        description: Error response
        contentType: "application/json"
        schema: ${file(doc/models/error.json)}
  exportGitVariables: false
  resolvedStage: ${self:custom._stages.${self:provider.stage}, 'dev'}
  _stages:
    prod: prod
    dev: dev
